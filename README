===========================================
THOUGHT MACHINE
Programming Test
===========================================

Requirements:
 - Please complete the following programming exercise. Allow for about 4-6
   hours.
 - It is strongly recommended that you use Java and Gradle.
 - Please produce production-quality code, providing tests and comments where
   necessary.
 - Provide all source code, ideally in a zip file / github repo so that it can
   be checked out and built.
 - Provide any additional resources that might be helpful, such as a README
   file.


===========================================

Consider a square board of size N. Each cell can either be empty or be
occupied by a ship. The position of a ship is defined by three parameters: an
x-coordinate, a y-coordinate and an orientation (north, east, south, west).

Once the initial state of the board is set up, any number of operations can
occur. There are two types of operations:

-- Move a ship
Specified by an initial coordinate and a series of movements which can be move
forward (in the direction that ship is facing), rotate left, rotate right. A
ship can navigate through an occupied cell. However, two ships cannot occupy
the same cell at the end of a move operation.

-- Shoot down a ship
Specified by an x- and y-coordinate. If the cell is occupied, that ship is
sunk and the cell can be occupied by another ship. If there is no ship,
nothing happens.


===========================================

** EXERCISE **
Given the initial state of a board and a series of operations, output the
final state of the board (the position of all ships and whether it has sunk or
not). The input should be a file and the output stored in another file.

The first line contains the size of the board. The second line contains a list
of coordinate-and-orientation tuples (initial position of the ships). Any
subsequent lines are operations: shoot operations (simply coordinates) and
move operations (coordinates to specify the ship to be considered and a
sequence of 'L' (rotate left), 'R' (rotate right) and 'M' (move)).

Assume the bottom-left cell to be the origin (0, 0).

** EXAMPLE **
Input:
  10                      // Size of the board is 10x10
  (0, 0, N) (9, 2, E)     // 2 ships in different locations
  (0, 0) MRMLMM           // move/rotate the ship located at (0, 0)
  (9, 2)                  // shoot at (9, 2) and sink the ship if there is one

Output:
  (1, 3, N)
  (9, 2, E) SUNK
